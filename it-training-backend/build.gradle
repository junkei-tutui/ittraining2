group = 'jp.zein.it.training'

buildscript {
    ext {
        // springBootVersion = '2.4.5'
		// goomphVersion = '3.33.0'
        springBootVersion = '2.6.6'
		goomphVersion = '3.35.0'
    }
    repositories {
        mavenCentral()
		maven {
		      url "https://plugins.gradle.org/m2/"
	    }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.diffplug.gradle:goomph:${goomphVersion}"
    }
}

subprojects {

	apply plugin: 'java'
	apply plugin: 'jacoco'
	apply plugin: 'eclipse'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'com.diffplug.eclipse.apt'

	ext{
		springCloudVersion='2021.0.3'
		springCloudAwsVersion='2.4.1'
		// H-457:Java8 LocalDateTimeのデフォルト使用禁止対応
		jacksonDatatypeJSR310='2.13.2'

		junitVersion = '5.2.0'
		// modelMapperVersion= '2.3.8'
		domaStarterVersion = '1.4.0'
		domaProcessorVersion = '2.35.0'
		// commonsIoVersion= '2.8.0'
		// springDocOpenApiVersion = '1.5.0'
		// swaggerVersion = '2.1.5'
		mysqlConnectorVersion = '8.0.23'
		modelMapperVersion= '3.1.0'
		// domaStarterVersion = '1.6.0'
		// domaProcessorVersion = '2.51.0'
		commonsIoVersion= '2.11.0'
		commonsTextVersion = '1.9'
		springDocOpenApiVersion = '1.6.6'
		swaggerVersion = '2.1.13'
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

    repositories {
        mavenCentral()
    }

	test {
		useJUnitPlatform()
	}

	dependencyManagement {
	  imports {
	    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	    mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:${springCloudAwsVersion}"
	  }
	}
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter'
		implementation 'org.springframework.boot:spring-boot-starter-validation'

		// DB関係
  		implementation "org.seasar.doma.boot:doma-spring-boot-starter:${domaStarterVersion}"
  		annotationProcessor "org.seasar.doma:doma-processor:${domaProcessorVersion}"
		runtimeOnly "mysql:mysql-connector-java:${mysqlConnectorVersion}"

		implementation "org.modelmapper.extensions:modelmapper-spring:${modelMapperVersion}"

		// lombok
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		testCompileOnly 'org.projectlombok:lombok'
		testAnnotationProcessor 'org.projectlombok:lombok'

		// Junit5
		testImplementation('org.springframework.boot:spring-boot-starter-test') {
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		}
	    testImplementation group: 'com.github.springtestdbunit', name: 'spring-test-dbunit', version: '1.3.0' // SpringでDBUnitを用いる際に必要
	    // testImplementation group: 'org.dbunit', name: 'dbunit', version: '2.7.0' // DBUnitのAPI
	    testImplementation group: 'org.dbunit', name: 'dbunit', version: '2.7.3' // DBUnitのAPI
		testImplementation 'org.springframework.security:spring-security-test'

   	}

	//
	afterEvaluate { project ->
        if (project.bootJar.enabled) {
			dependencies {
				developmentOnly 'org.springframework.boot:spring-boot-devtools'
			}
        }
    }

	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11

	compileJava {
	    options.encoding = 'UTF-8'

		// リポジトリの@Paramを付与不要にするためのコンパイルオプション
	    options.compilerArgs << '-parameters'
	}

	// resources配下のdoma用SQLファイルをクラスファイル出力先にコピー
	// https://qiita.com/haruto167/items/59d898edd29a4cab8e2a]
	// 注意：以下の対処方法では解決できないので注意
	// https://qiita.com/kobayo/items/4226c40d454336eadacd
	task copyDomaResources(type: Sync)  {
	    from sourceSets.main.resources.srcDirs
	    // into compileJava.destinationDir
	    into compileJava.destinationDirectory
	    include 'doma.compile.config'
	    include 'META-INF/**/*.sql'
	    include 'META-INF/**/*.script'
	}
	compileJava {
	    dependsOn copyDomaResources
	}

	// domaが自動生成するクラスファイルの出力先をmain/javaのクラスファイル出力先と同じにする
	eclipse {
		classpath {
//		// [DOMA4019] 対応
//    	//   ソース毎の出力先指定を解除
//    	file.whenMerged {
//     		entries.each { entry ->
//				// デフォルトのパスをDomaにあわせてmainに設定する。
//        		if (entry.kind == 'output' && entry.hasProperty('path')) {
//         			entry.path = 'bin/main'
//        		}
//     		}
//    	}
			file {
				whenMerged { classpath ->
					classpath.entries.removeAll { it.path == ".apt_generated" }
				}

				withXml {
					def node = it.asNode()
						node.appendNode( 'classpathentry', [ kind: 'src', output: 'bin/main', path: '.apt_generated'])
				}
			}
		}
	}

	// Domaのリソースが重複エラーとなるため、ファイルコピー時の設定を上書き可とする。(全プロジェクトに適用) 
	bootJar {
	    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	}
	jar {
	    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	    enabled = false
	}

}